
/*  BUTTONS ***/

$prefix: '.btn';
@mixin button-generate-schemes($args:()){
    $defaults: (
        init: (
            border: '',
            background: '',
            color: '',
        ),
        hover: (
            border: '',
            background: '',
            color: '',
        ),
        active: (
            border: '',
            background: '',
            color: '',
        )
    );
    $opts: map-merge($defaults,$args);

    $selector: #{&};

    @each $state,$properties in $opts {

        @if $state == 'hover' {
            
        
            @at-root &:hover,
            #{$prefix}-group#{$prefix}-group-unite:hover &,
            #{$prefix}-group#{$prefix}-group-unite #{$prefix}:hover ~ &,
            
            &:focus,
            #{$prefix}-group#{$prefix}-group-unite:focus &,
            #{$prefix}-group#{$prefix}-group-unite #{$prefix}:focus ~ &,

            &.focus,
            #{$prefix}-group#{$prefix}-group-unite.focus &
            #{$prefix}-group#{$prefix}-group-unite #{$prefix}.focus ~ & {
                @include internal-btn-set-scheme($properties)
            }
            // @at-root &:hover,
            // &:focus,
            // &:.focus {
            //     @include internal-btn-set-scheme($properties)
            // }

        }@else if $state == 'active' {
            @at-root &:active,
            #{$prefix}-group#{$prefix}-group-unite:active &,
            #{$prefix}-group#{$prefix}-group-unite #{$prefix}:active ~ &,

            &.active,
            #{$prefix}-group#{$prefix}-group-unite.active &,
            #{$prefix}-group#{$prefix}-group-unite #{$prefix}.active ~ & {
                @include internal-btn-set-scheme($properties);
            }
            
        }@else{
        
            @at-root & {
                @include internal-btn-set-scheme($properties)
            }
            
            &#{$prefix}-no-interaction,
            &#{$prefix}-no-interaction:hover,
            &#{$prefix}-no-interaction:focus,
            &#{$prefix}-no-interaction.focus,
            &#{$prefix}-no-interaction:active,
            &#{$prefix}-no-interaction.active {
                @include internal-btn-set-scheme($properties,false,true);
            }
            
            &#{$prefix}-disabled,
            &#{$prefix}-disabled:hover,
            &#{$prefix}-disabled:focus,
            &#{$prefix}-disabled.focus,
            &#{$prefix}-disabled:active,
            &#{$prefix}-disabled.active,
            
            #{$prefix}-group-disabled &,
            #{$prefix}-group-disabled:hover &,
            #{$prefix}-group-disabled:focus &,
            #{$prefix}-group-disabled.focus &,
            #{$prefix}-group-disabled:active &,
            #{$prefix}-group-disabled.active & {
                @include internal-btn-set-scheme($properties,true,true);
            }
        }
    }

}

@mixin internal-btn-set-scheme($properties,$is-disabled: false,$add-important: false,) {


    $important: '';

    @if $add-important {

        $important: '!important';
    }

    @if map-get($properties,border) {
        @if $is-disabled {
            border-color: internal-btn-calculate-disabled( map-get($properties,border) ) #{$important};
        }@else{
            border-color: map-get($properties,border) #{$important};
        }
    }

    @if map-get($properties,background) {
        @if $is-disabled {
            background: internal-btn-calculate-disabled( map-get($properties,background) ) #{$important};
        }@else{
            background: map-get($properties,background) #{$important};
        }
    }

    @if map-get($properties,color) {
        @if $is-disabled {
            color: internal-btn-calculate-disabled( map-get($properties,color) ) #{$important};
        }@else{
            color: map-get($properties,color) #{$important};
        }
    }

}

@function internal-btn-calculate-disabled($color){
    @if $color != transparent {
        @return rgba( $color,$global-disabled-opacity );
    }@else {
        @return $color;
    }
}


#{$prefix} {
    @include type-set((
        size: rem($btn-font-size / $body-font-size),
        leading: $btn-line-height,
        weight: $btn-font-weight,
        style: $btn-font-style,
        font: $btn-font-family,
        align:center,
        decoration:none,
        case: $btn-text-transform,
    ));
    // overflow:hidden;
    padding-top: calc(  (  (#{ rem($btn-height/$body-font-size) } - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );
    padding-bottom: calc(  (  (#{ rem($btn-height/$body-font-size) } - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );
    padding-right: em($btn-gutter / $btn-font-size);
    padding-left: em($btn-gutter / $btn-font-size);
    display:inline-block;
    vertical-align: middle;
    background:none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    max-width:100%;
    border: $btn-border-width solid transparent;
    transition: $transition-duration-short all $transition-timing;
    
    &#{$prefix}-no-radius {
        border-radius: 0!important;
    }

    &-group,
    :not(#{$prefix}-group) > & {
        box-shadow: $btn-box-shadow;

        &:hover {
            box-shadow: $btn-box-shadow-hover;
        }
    }

    &,&-group {
        border-radius: $btn-border-radius;
    }

    &#{$prefix}-no-shadow,
    &#{$prefix}-link {
        box-shadow:none!important;
    }

    &-block {
        display:block;
        width:100%;
    }


    &-disabled,
    #{$prefix}-group-disabled & {
        cursor:no-drop;
    }

    &#{$prefix}-large,
    #{$prefix}-group#{$prefix}-large & {
        font-size: rem($btn-font-size-large / $body-font-size);
        padding-top: calc(  (  (#{ rem($btn-height-large/$body-font-size) } - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );
        padding-bottom: calc(  (  (#{ rem($btn-height-large/$body-font-size) } - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );

        border-radius: $btn-border-radius-large;
    }

    &#{$prefix}-small,
    #{$prefix}-group#{$prefix}-small & {
        font-size: rem($btn-font-size-small / $body-font-size);
        padding-top: calc(  (  (#{rem($btn-height-small/$body-font-size)} - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );
        padding-bottom: calc(  (  (#{rem($btn-height-small/$body-font-size)} - (#{$btn-border-width} * 2)) - (#{ em( type-lead($btn-font-size,$btn-line-height) ) }) ) * .5 );
        border-radius: $btn-border-radius-small;
    }

    &-symbol {
        width: rem($btn-height/$body-font-size);
        padding-left:0;
        padding-right:0;

        #{$prefix}-small &{
            width: rem($btn-height-small/$body-font-size);
        }

        #{$prefix}-large &{
            width: rem($btn-height-large/$body-font-size) ;
        }



        .symbol {
            margin-left:auto;
            margin-right:auto;
        }
    }
    .symbol {
        &:last-child {
            margin-left: .25em;
        }
        &:first-child {
            margin-right: .25em;
        }
    }

    &-group {
        display:inline-flex;
        overflow:hidden;
        position:relative;

        &#{$prefix}-large {
            border-radius: $btn-border-radius-large;
        }

        &#{$prefix}-small {
            border-radius: $btn-border-radius-small;
        }

        &#{&}-horizontal {
            max-width:100%;
            

            > #{$prefix}:nth-last-child(n+2) {
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;
            }

            > #{$prefix}:nth-child(n+2) {
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;

                &,
                &:hover {
                    border-left-color: $btn-group-separator-color !important;
                }
            }
        }

        &#{&}-vertical {
            flex-direction:column;

            > #{$prefix}:nth-last-child(n+2) {
                border-bottom-right-radius: 0;
                border-bottom-left-radius: 0;
            }

            > #{$prefix}:nth-child(n+2) {
                border-top-right-radius: 0;
                border-top-left-radius: 0;

                &,
                &:hover {
                    border-top-color: $btn-group-separator-color !important;
                }
            }
        }
    }

    @each $scheme,$properties in $calculated-btn-schemes {
        &#{&}-#{$scheme} {
            @include button-generate-schemes($properties);
        }
    }
}