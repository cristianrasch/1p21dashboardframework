

$prefix: '.btn';
@mixin button-generate-schemes($args:()){
    $defaults: (
        init: (
            border: '',
            background: '',
            color: '',
        ),
        hover: (
            border: '',
            background: '',
            color: '',
        ),
        active: (
            border: '',
            background: '',
            color: '',
        )
    );
    $opts: map-merge($defaults,$args);

    $selector: #{&};

    @each $state,$properties in $opts {

        @if $state == 'hover' {
            
        
            @at-root &:hover:not(#{$prefix}-disabled),
            &:focus:not(#{$prefix}-disabled),
            #{$prefix}-group:hover:not(#{$prefix}-disabled) &,
            #{$prefix}-group:focus:not(#{$prefix}-disabled) & {
                @include internal-btn-set-scheme($properties)
            }
        }@else if $state == 'active' {
            
        
            @at-root &:active,
            #{$prefix}-group:active:not(#{$prefix}-disabled) & {
                @include internal-btn-set-scheme($properties)
            }
            
        }@else{
        
            @at-root #{$selector} {
                @include internal-btn-set-scheme($properties)
            }

        }
    }

}

@mixin internal-btn-set-scheme($properties) {
    @if map-get($properties,border) {
        border-color: map-get($properties,border);
    }

    @if map-get($properties,background) {
        background: map-get($properties,background);
    }

    @if map-get($properties,color) {
        color: map-get($properties,color);
    }

}


#{$prefix} {
    @include type-set((
        size: em($btn-font-size / $body-font-size),
        leading: strip-unit($btn-line-height / $btn-font-size),
        font: $btn-font-family,
        align:center,
        decoration:none,
        style: normal,
        case: $btn-case,
    ));
    // overflow:hidden;
    padding-top: calc(  (  (#{$btn-height} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
    padding-bottom: calc(  (  (#{$btn-height} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
    padding-right: em($btn-gutter / $btn-font-size);
    padding-left: em($btn-gutter / $btn-font-size);
    display:inline-block;
    vertical-align: middle;
    background:none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    max-width:100%;
    border: $btn-border-width solid transparent;
    transition: $transition-duration-short all $transition-timing;

    &-group,
    :not(#{$prefix}-group) > & {
        box-shadow: $btn-box-shadow;

        &:hover {
            box-shadow: $btn-box-shadow-hover;
        }
    }

    &,&-group {
        border-radius: $btn-border-radius;
    }

    &#{$prefix}-no-shadow {
        box-shadow:none!important;
    }

    &-block {
        display:block;
        border-radius:0;
    }


    &-disabled {
        opacity: .5;

        &:hover {
            cursor:no-drop;
        }
    }

    &#{$prefix}-small,
    #{$prefix}-group#{$prefix}-large & {
        font-size: em($btn-font-size-large / $body-font-size);
        padding-top: calc(  (  (#{$btn-height-large} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
        padding-bottom: calc(  (  (#{$btn-height-large} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
        border-radius: $btn-border-radius-large;
    }

    &#{$prefix}-small,
    #{$prefix}-group#{$prefix}-small & {
        font-size: em($btn-font-size-small / $body-font-size);
        padding-top: calc(  (  (#{$btn-height-small} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
        padding-bottom: calc(  (  (#{$btn-height-small} - (#{$btn-border-width} * 2)) - (1em * #{ type-lead($btn-line-height, $btn-font-size) }) ) * .5 );
        border-radius: $btn-border-radius-small;
    }


    &-symbol {
        width: $btn-height;
    }

    &-group {
        display:inline-flex;
        overflow:hidden;

        &#{$prefix}-large {
            border-radius: $btn-border-radius-large;
        }

        &#{$prefix}-small {
            border-radius: $btn-border-radius-small;
        }

        &#{&}-horizontal {
            max-width:100%;
            

            #{$prefix}:nth-last-child(n+2) {
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;
            }

            #{$prefix}:nth-child(n+2) {
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
            }
        }

        &#{&}-vertical {
            flex-direction:column;

            #{$prefix}:nth-last-child(n+2) {
                border-bottom-right-radius: 0;
                border-bottom-left-radius: 0;
            }

            #{$prefix}:nth-child(n+2) {
                border-top-right-radius: 0;
                border-top-left-radius: 0;
            }
        }
    }

    @each $scheme,$properties in $btn-schemes {
        &-#{$scheme} {
            @include button-generate-schemes($properties);
        }
    }
}