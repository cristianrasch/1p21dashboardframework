
/*** HELPERS ***/

	/* HIDEY CLASSES */
		.desktop-only {
			display: none !important;
		}

		.laptop-only {
			display: none !important;
		}

		.tablet-only {
			display: none !important;
		}

		.mobile-only {
			display: none !important;
		}

		@include breakpoint(lg) {
			.desktop-only {
				display: block !important;
			}
			
			.desktop-hide {
				display:none!important;
			}
		}

		@include breakpoint((md,md-max)) {
			.laptop-only {
				display: block !important;
			}
			
			.laptop-hide {
				display:none!important;
			}
		}

		@include breakpoint((sm,sm-max)) {

			.tablet-only {
				display: block !important;
			}
			
			.tablet-hide {
				display:none!important;
			}
		}

		@include breakpoint(xs-max) {
			.mobile-only {
				display: block !important;
			}
			
			.mobile-hide {
				display:none!important;
			}
		}

		.sr-only {
			display:none!important;
		}
	
		


	/* BACKGROUND CLASSES */



// extend for elements that needs backgrounds so we can extend with responsibility
	%background {
		@each $tag,$color in $calculated-brand-color-declarations {
			&-#{$tag} {
				background-color: $color ;
			}

			&-important-#{$tag} {
				background-color: $color !important;
			}
		}

		&-gradient {

			& {
				@include gradient((
					color1: $gradient-start,
					color2: $gradient-end,
					angle: 0deg,
					use-shorthand:false,
				));

				&-important {
					@include gradient((
						color1: $gradient-start,
						color2: $gradient-end,
						angle: 0deg,
						use-shorthand:false,
						add-important: true
					));
				}
			}

			@each $angle in $calculated-gradient-angles {
				&-#{$angle} {
					@include gradient((
						color1: $gradient-start,
						color2: $gradient-end,
						angle: to-unit($angle,deg),
						use-shorthand:false,
					));
				}



				@each $angle in $calculated-gradient-angles {
					&-important-#{$angle} {
						@include gradient((
							color1: $gradient-start,
							color2: $gradient-end,
							angle: to-unit($angle,deg),
							use-shorthand:false,
							add-important: true
						));
					}
				}
			}
		}
	}

		$prefix: '.background';
		#{$prefix} {

			&-global {
				background-color: $global-background!important;

				.body-inverse & {
					background-color: $global-background-inverse!important;
				}
			}


			&-global-contrast {
				background-color: $global-background-contrast!important;

				.body-inverse & {
					background-color: $global-background-contrast-inverse!important;
				}

			}

			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					&-#{$i} {
						background-color: nth($calculated-color-brand-intensity,$i)!important;
					}
				}
			}

			&-gradient {
				@extend %background-gradient-important;

				$calculated-gradient-selector: #{&};

				@each $angle in $calculated-gradient-angles {
					$calculated-gradient-selector:  #{ $calculated-gradient-selector ', '+ & +'-' + $angle };
				}

				@at-root #{$calculated-gradient-selector} {
					background-color: $gradient-start!important;
				}

				@each $angle in $calculated-gradient-angles {
					&-#{$angle} {
						@extend %background-gradient-important-#{$angle};
					}
				}
			}

			&-transparent {
				background-color:transparent!important;
			}


			@each $tag,$color in $calculated-brand-color-declarations {
				&-#{$tag} {
					@extend %background-important-#{$tag};
				}
			}
		}

	/* COLOR CLASSES */
		$prefix: '.color';
		#{$prefix} {
			&-global {
				color: $global-color!important;

				.body-inverse & {
					color: $global-color-inverse!important;
				}
			}

			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					&-#{$i} {
						color: nth($calculated-color-brand-intensity,$i)!important;
					}
				}
			}

			&-inherit {
				color: inherit!important;
			}


			@each $tag,$color in $calculated-brand-color-declarations {
				&-#{$tag} {
					color: $color!important;
				}
			}
		}



	/* BACKGROUND CLASSES */
		.flex {

			&-xs {
				@extend %flex-xs;
			}
			
			&-sm {
				@extend %flex-sm;
			}
			
			&-md {
				@extend %flex-md;
			}
			
			&-lg {
				@extend %flex-lg;
			}

			&-justify-content {
				&-space-between {
					justify-content: space-between;
				}
			}

			&-align {
				&-items {
					&-center {
						align-items: center;
					}
				}
			}

			&-wrap {
				flex-wrap:wrap;
			}

			&-nowrap {
				flex-wrap:nowrap;
			}

			&-1-1 {
				flex: 1 1;
			}

			&-1-0 {
				flex: 1 0;
			}

			&-0-1 {
				flex: 0 1;
			}

			&-0-0 {
				flex: 0 0;
			}
		}

	

	/* FIT IMAGE */	

		/* emulate background cover on image tags */
		.fit-image {
			position: relative;
			overflow:hidden;
			
			img {
				position:absolute;
				width: 100%;
				height: 100%;
				max-width:none;
				top:-50%;
				left:-50%;
				right:-50%;
				bottom:-50%;
				margin:auto;
				object-fit: cover;
			}
		}

	/* TEXT CLASSES */
	$prefix: '.text';
	#{$prefix}{

		&-block {
			display:block;
		}
		&-gutter {
			@extend %for-p;
		}
		

		&-align {
			&-center {
				text-align: center!important;
			}
			&-left {
				text-align: left!important;
			}
			&-right {
				text-align: right!important;
			}
			&-justify {
				text-align: justify!important;
			}
		}

		&-transform {
			&-uppercase {
				text-transform: uppercase!important;
			}
			&-lowercase {
				text-transform: lowercase!important;
			}
			&-capitalize {
				text-transform: capitalize!important;
			}
		}

		&-vertical-align {
			&-middle {
				vertical-align:middle!important;
			}
			&-baseline {
				vertical-align:baseline!important;
			}
			&-top {
				vertical-align:top!important;
			}
			&-bottom {
				vertical-align:bottom!important;
			}
			&-text-top {
				vertical-align:text-top!important;
			}
			&-text-bottom {
				vertical-align:text-bottom!important;
			}
			&-sub {
				vertical-align:sub!important;
			}
			&-super {
				vertical-align:super!important;
			}
		}

		&-wrap {


			/* cut overflowing single line to ellipsis */
			&-ellipsis {
				white-space: nowrap!important;
				overflow: hidden!important;
				text-overflow: ellipsis!important;
			}

			&-nowrap {

				white-space: nowrap!important;
			}

			&-break {
				word-break: break-word!important;
				overflow-wrap: break-word!important;
			}
		}

		&-clip-background {
			@supports not (-webkit-background-clip: text) {
				background: transparent!important;
				color: color(p)!important;
			}

			@supports (-webkit-background-clip: text) {
				-webkit-background-clip: text!important;
				-webkit-text-fill-color: transparent!important;
			}
		}
	}



.font{

	&-weight {

		&-100 {
			font-weight: 100!important;
		}
		&-200 {
			font-weight: 200!important;
		}
		&-300 {
			font-weight: 300!important;
		}
		&-400 {
			font-weight: 400!important;
		}
		&-500 {
			font-weight: 500!important;
		}
		&-600 {
			font-weight: 600!important;
		}
		&-700 {
			font-weight: 700!important;
		}
		&-800 {
			font-weight: 800!important;
		}
		&-900 {
			font-weight: 900!important;
		}

	}

	&-size {
		&-large {
			font-size: $calculated-body-size-large;
		}
		&-small {
			font-size: $calculated-body-size-small;
		}
		&-normalize {
			font-size: 1rem;
		}
	}

	&-style {
		&-italic {
			font-style: italic!important;
		}
		&-oblique {
			font-style: oblique!important;
		}
	}
}

//gutters and paddings

.no-margin {
	margin:0!important;

	&-x {
		margin-left:0!important;
		margin-right:0!important;
	}


	&-y {
		margin-top:0!important;
		margin-bottom:0!important;
	}

	&-top {
		margin-top:0!important;
	}

	&-bottom {
		margin-bottom:0!important;
	}

	&-left {
		margin-left:0!important;
	}

	&-right {
		margin-right:0!important;
	}
}


.no-padding {
	padding:0!important;

	&-x {
		padding-left:0!important;
		padding-right:0!important;
	}


	&-y {
		padding-top:0!important;
		padding-bottom:0!important;
	}

	&-top {
		padding-top:0!important;
	}

	&-bottom {
		padding-bottom:0!important;
	}

	&-left {
		padding-left:0!important;
	}

	&-right {
		padding-right:0!important;
	}
}