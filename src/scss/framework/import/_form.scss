
//internal vars
$calculated-input-font-size: $input-font-size;
@if internal-is-convertable($input-font-size) {
    $calculated-input-font-size: rem($input-font-size / $body-font-size)
}

    $calculated-input-font-size-large: $input-font-size-large;
    @if internal-is-convertable($input-font-size-large) {
        $calculated-input-font-size-large: rem($input-font-size-large / $body-font-size)
    }

    $calculated-input-font-size-small: $input-font-size-small;
    @if internal-is-convertable($input-font-size-small) {
        $calculated-input-font-size-small: rem($input-font-size-small / $body-font-size)
    }


	$calculated-input-label-font-size: $input-label-font-size;
	@if internal-is-convertable($input-label-font-size) {
		$calculated-input-label-font-size: rem($input-label-font-size / $body-font-size)
	}
	
		$calculated-input-label-font-size-large: $input-label-font-size-large;
		@if internal-is-convertable($input-label-font-size-large) {
			$calculated-input-label-font-size-large: rem($input-label-font-size-large / $body-font-size)
		}
	
		$calculated-input-label-font-size-small: $input-label-font-size-small;
		@if internal-is-convertable($input-label-font-size-small) {
			$calculated-input-label-font-size-small: rem($input-label-font-size-small / $body-font-size)
		}


$calculated-input-line-height: type-lead( $input-font-size,$input-line-height );

	$calculated-input-label-line-height: type-lead( $input-label-font-size,$input-label-line-height );

$calculated-input-single-line: $calculated-input-line-height;
@if unitless($calculated-input-single-line) and unit($input-font-size) == px {
    $calculated-input-single-line: 1em * #{ type-lead( $input-font-size,$input-line-height ) }
}

	$calculated-input-label-single-line: $calculated-input-label-line-height;
	@if unitless($calculated-input-label-single-line) and unit($input-label-font-size) == px {
		$calculated-input-label-single-line: 1em * #{ type-lead( $input-label-font-size,$input-label-line-height ) }
	}

$calculated-input-height: $input-height;
@if internal-is-convertable($input-height){
    $calculated-input-height: rem($input-height/$body-font-size);
}

// @error $calculated-input-height;

    $calculated-input-height-large: $input-height-large;
    @if internal-is-convertable($input-height-large){
        $calculated-input-height-large: rem($input-height-large/$body-font-size);
    }

    $calculated-input-height-small: $input-height-small;
    @if internal-is-convertable($input-height-small){
        $calculated-input-height-small: rem($input-height-small/$body-font-size);
	}


	

$calculated-input-gutter-x: $input-gutter-x;
@if internal-is-convertable($input-gutter-x,$input-font-size) {
    $calculated-input-gutter-x: em($input-gutter-x / $input-font-size)
}@else if internal-is-convertable($input-gutter-x){
	$calculated-input-gutter-x: rem($input-gutter-x/$body-font-size);
}
//info

$calculated-input-info-font-size: $input-info-font-size;
@if internal-is-convertable($input-info-font-size) {
	$calculated-input-info-font-size: rem($input-info-font-size / $body-font-size)
}

$calculated-input-info-line-height: type-lead( $input-info-font-size,$input-info-line-height );


$calculated-input-info-margin-top: $input-info-margin-top;
@if internal-is-convertable($input-info-margin-top) {
	$calculated-input-info-margin-top: em($input-info-margin-top / $input-info-font-size)
}



/*** SET ***/


/* input clasees */
$prefix: '.input';

%for-form {
	&-global {
		transition: $transition-duration-short color $transition-timing, $transition-duration-short border $transition-timing, $transition-duration-short box-shadow $transition-timing;
		max-width:100%;

		&-disabled {

			opacity: $global-disabled-opacity!important;
			cursor: not-allowed!important;
		}
	}

	&-input-and-group {
		border-radius: $input-border-radius;
		box-shadow: $input-box-shadow;

		&#{$prefix}-no-radius {
			border-radius: 0!important;
		}

		.nav & {
			border-radius: 0 !important;
		}
	}

	&-label {
		& {
			@include type-set((
				size: #{$calculated-input-label-font-size},
				color:$input-label-color,
				leading: $calculated-input-label-line-height ,
				weight: $input-label-font-weight,
				style: $input-label-font-style,
				font: $input-label-font-family,
				align:inherit,
				decoration:none,
				case: $input-label-text-transform,
			));
			margin-right: 1rem;
			display:inline-block;
			padding-top: calc( (#{ $calculated-input-height } - (#{$calculated-input-label-single-line}) ) * .5 );
			padding-bottom: calc( (  #{ $calculated-input-height } - (#{$calculated-input-label-single-line}) ) * .5 );

			&#{$prefix}-label-large {
				font-size: $calculated-input-font-size-large;
				padding-top: calc(   (#{ $calculated-input-height-large } - (#{$calculated-input-label-single-line}) ) * .5 );
				padding-bottom: calc(  (#{ $calculated-input-height-large } - (#{$calculated-input-label-single-line}) ) * .5 );
				border-radius: $input-border-radius-large;
			}

			&#{$prefix}-label-small {
				font-size: $calculated-input-font-size-small;
				padding-top: calc(  (#{$calculated-input-height-small} - (#{$calculated-input-label-single-line}) ) * .5 );
				padding-bottom: calc(  (#{$calculated-input-height-small} - (#{$calculated-input-label-single-line}) ) * .5 );
				border-radius: $input-border-radius-small;
			}

			.body-inverse & {
				color:$input-label-color-inverse;
			}
		}
	}

	&-input {
		&-itself {
			font: inherit;
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;

			&:focus {

				outline: none;
				box-shadow: $input-box-shadow-focus;
			}
		}
		& {
			-webkit-appearance: none;
			appearance: none;
			@include type-set((
				size: #{$calculated-input-font-size},
				color:$input-color,
				leading: #{ $calculated-input-line-height } ,
				weight: $input-font-weight,
				style: $input-font-style,
				font: $input-font-family,
				align:inherit,
				decoration:none,
				case: $input-text-transform,
			));
			display:inline-block;
			background: $input-background;
			border: $input-border-width solid $input-border-color;
			padding-right: $calculated-input-gutter-x;
			padding-left: $calculated-input-gutter-x;
			padding-top: calc(  (  (#{ $calculated-input-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-input-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );

			&#{$prefix}-large,
			#{$prefix}-group#{$prefix}-group-large & {
				font-size: $calculated-input-font-size-large;
				padding-top: calc(  (  (#{ $calculated-input-height-large } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
				padding-bottom: calc(  (  (#{ $calculated-input-height-large } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
				border-radius: $input-border-radius-large;
			}

			&#{$prefix}-small,
			#{$prefix}-group#{$prefix}-group-small & {
				font-size: $calculated-input-font-size-small;
				padding-top: calc(  (  (#{$calculated-input-height-small} - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
				padding-bottom: calc(  (  (#{$calculated-input-height-small} - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
				border-radius: $input-border-radius-small;
			}

			.body-inverse & {
				color:$input-color-inverse;
				background: $input-background-inverse;
			}

			option {

				font:inherit;
			}


			#{$prefix}-group & {
				box-shadow: none;
			}

			&::-webkit-input-placeholder {
				color: $input-placeholder-color;
			}
			
			&:-moz-placeholder {
				color: $input-placeholder-color;
			}
			
			&:-ms-input-placeholder{
				color: $input-placeholder-color;
			}
			
			&:focus::-webkit-input-placeholder {
				color: transparent !important;
			}
			
			&:focus:-moz-placeholder {
				color: transparent !important;
			}
			
			&:focus:-ms-input-placeholder{
				color: transparent !important;
			}

			
			&.focus::-webkit-input-placeholder {
				color: transparent !important;
			}
			
			&.focus:-moz-placeholder {
				color: transparent !important;
			}
			
			&.focus:-ms-input-placeholder{
				color: transparent !important;
			}

			&#{$prefix}-disabled,
			&[disabled] {

				&,
				&:focus,
				&.focus {
					border-color: $input-border-color;
				}
			}

			&:focus,
			&.focus {
				box-shadow: $input-box-shadow-focus;
				border-color: $input-border-color-focus;
			}


		}


		&-single-line {
			@extend %for-form-input;
			height: $calculated-input-height;
			vertical-align: middle;

			&#{$prefix}-large,
			#{$prefix}-group#{$prefix}-group-large & {
				height: $calculated-input-height-large;
			}
	
			&#{$prefix}-small,
			#{$prefix}-group#{$prefix}-group-small & {
				height: $calculated-input-height-small;
			}

		}

		&-multiple-line {
			@extend %for-form-input;
			min-height: $calculated-input-height * $input-height-multiple-factor;
			vertical-align: top;
			max-height:100%;
			
			overflow-y: auto;

			option {
				padding-right: $calculated-input-gutter-x;
				padding-left: $calculated-input-gutter-x;
				margin-right: $calculated-input-gutter-x * -1;
				margin-left: $calculated-input-gutter-x * -1;
			}

		}

		@each $tag,$color in $calculated-brand-color-declarations {
			@at-root #{$prefix}-label#{$prefix}-label-#{$tag} {
				&,&:focus {
					color: $color!important;
				}
			}
	
			@at-root &#{$prefix}-#{$tag}  {
	
				&:not(:focus):not(.focus) {
					box-shadow: $input-box-shadow-brand-basis $color;
				}
	
				&,
				&:focus,
				&.focus {
	
					border-color: $color;
				}
			}
		}
	}
}

#{$prefix} {


	& {
		@extend %for-form-input-itself;
		background-color: $input-background;

		.body-inverse & {
			background-color: $input-background-inverse;
		}

		&[disabled] {
			@extend %for-form-global-disabled;
			background-color: $input-background-disabled;

			.body-inverse & {
				background-color: $input-background-disabled-inverse;
			}
		}
		
		@at-root select#{$prefix}:not([multiple]),
		&-select:not([multiple]) {
			padding-right: $calculated-input-gutter-x * 2;
		}

		@at-root select#{$prefix},
		&-select {
			background-image:
				linear-gradient(-130deg, $input-select-dropdown-color 0%, $input-select-dropdown-color 50%, transparent 51%, transparent 100%),
				linear-gradient(130deg, $input-select-dropdown-color 0%, $input-select-dropdown-color 50%, transparent 51%, transparent 100%)
				;
			background-size:
				#{$calculated-symbol-caret-width * .5} $calculated-symbol-caret-height,
				#{$calculated-symbol-caret-width * .5} $calculated-symbol-caret-height
				;
			background-position:
				calc(100% - (1em + #{$calculated-symbol-caret-width * .425} )) 50%,
				calc(100% - 1em) 50%
				;
			background-repeat: no-repeat,no-repeat;
			
		}

		@at-root select#{$prefix}[multiple],
		&-select[multiple]{
			background-image: none;
		}

		&-radio,
		&-checkbox,
		&[type=radio],
		&[type=checkbox] {
			vertical-align: baseline;
			display:inline-block;
			margin-right: .5em;
		}
	}

	&-info {

		@include type-set((
			size: $calculated-input-info-font-size,
			leading: $calculated-input-info-line-height,
			color: $input-info-color,
			weight:$input-info-font-weight,
			style: $input-info-font-style,
			case: $input-info-text-transform,
		));
		margin-top:$input-info-margin-top;
		display:block;
		#{$prefix}-wrapper-horizontal & {
			width: calc(100% - #{$input-label-horizontal-width});
			align-self: flex-end;
			margin-left: auto;
		}
	}

	&-label  {
		@extend %for-form-global;
		@extend %for-form-label;
	}

	&-label-disabled,
	&-disabled {
		@extend %for-form-global-disabled;
	}


	&-single-line,
	&-multiple-line {
		@extend %for-form-global;
		@extend %for-form-input;

		.nav & {
			padding-top: calc(  (  (#{ $calculated-nav-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-nav-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
			height: #{ $calculated-nav-height };
			border-radius: 0;
		}

		#{$prefix}-wrapper & {
			display: block;
			flex: 1 1;
		}

		@at-root &,
		#{$prefix}-group {
			@extend %for-form-input-and-group;
		}
		
	}
	

	&-single-line {
		@extend %for-form-input-single-line;
	}
	
	&-multiple-line,
	&[multiple] {
		@extend %for-form-input-multiple-line;
	}

	&-wrapper {
		max-width:100%;

		&#{&}-block {

			display:flex;
			margin-right: 0;
		}
		
		@include br(md){
			display:inline-flex;
			margin-right: 2rem;
			

			&-horizontal {
				flex-direction: row;
				align-items: flex-start;
				flex-wrap: wrap;

				> #{$prefix}-label {
					flex: 0 0 $input-label-horizontal-width;

					&:first-child:last-child {
					/* labels that typically wrapp radio and checboxes*/
						flex: 1 1 auto;
					}
				}
				
			}

			&-vertical {
				flex-direction: column;
			}
		}

		@include br(sm-max) {
			&#{&}-block {
				flex-direction: column;
			}
		}
	}

	///updates here should match btn-group 
	&-group {
		display:inline-flex;
        position:relative;
		max-width:100%;
		overflow-x:auto;
		overflow-y:visible;
        
        &-block {
            display:flex;

            .input,.trumbowyg {
                flex: 1 1;
            }
        }
		

        &#{&}-large {
            border-radius: $input-border-radius-large;
        }

        &#{&}-small {
            border-radius: $input-border-radius-small;
        }

        &#{&}-horizontal {
            

            &:not(#{$prefix}-group-responsive) {

                > #{$prefix},.btn,.trumbowyg{
					&:nth-last-child(n+2) {
						border-top-right-radius: 0;
						border-bottom-right-radius: 0;
					}
				}

                > #{$prefix},.btn,.trumbowyg{
					&:nth-child(n+2) {
						border-top-left-radius: 0;
						border-bottom-left-radius: 0;

						&,
						&:hover {
							border-left-color: $input-group-separator-color !important;
						}
					}
				}
            }
        }

        &#{&}-vertical {
            flex-direction:column;

            > #{$prefix},.btn,.trumbowyg{
				&:nth-last-child(n+2) {
					border-bottom-right-radius: 0;
					border-bottom-left-radius: 0;
				}
			}

            > #{$prefix},.btn,.trumbowyg{
				&:nth-child(n+2) {
					border-top-right-radius: 0;
					border-top-left-radius: 0;

					&,
					&:hover {
						border-top-color: $input-group-separator-color !important;
					}
				}
            }
        }

        &#{&}-responsive {
			&#{$prefix}-group-horizontal {

				@include br(md){

                    > #{$prefix},.btn,.trumbowyg{
						&:nth-last-child(n+2) {
							border-top-right-radius: 0;
							border-bottom-right-radius: 0;
						}
					}

                    > #{$prefix},.btn,.trumbowyg{
						&:nth-child(n+2) {
							border-top-left-radius: 0;
							border-bottom-left-radius: 0;

							&,
							&:hover {
								border-left-color: $input-group-separator-color !important;
							}
						}
					}
					
				}
				@include br(sm-max) {
					width:100%;
					
					flex-wrap:wrap;
					display:flex;
					flex-direction:column;
	
					> #{$prefix},.btn,.trumbowyg{
						&:nth-last-child(n+2) {
							border-bottom-right-radius: 0;
							border-bottom-left-radius: 0;
						}
					}
		
					> #{$prefix},.btn,.trumbowyg{
						&:nth-child(n+2) {
							border-top-right-radius: 0;
							border-top-left-radius: 0;
			
							&,
							&:hover {
								border-top-color: $input-group-separator-color !important;
							}
						}
					}
				}
            }
        } 
	}

	&-legend {
		display:block;
	}
}



.special-form {
	padding: $special-form-gutter-y $special-form-gutter-x 0;
	background: $special-form-background;
	border-radius: $special-form-border-radius;
	

	.body-inverse & {
		background: $special-form-background-inverse;
	}


	#{$prefix}-wrapper {
		max-width: none;

		&:nth-child(n+2) {
			border-top: 1px solid gray;
		}
	}

	#{$prefix}-single-line,
	#{$prefix}-multiple-line,
	& #{$prefix}-trumbowyg-box:not(#{$prefix}-trumbowyg-fullscreen) #{$prefix}-trumbowyg-editor {
		background:transparent;
		padding-left: $special-form-gutter-x;
		padding-right:$special-form-gutter-x;
		margin-left: $special-form-gutter-x * -1;
		margin-right:$special-form-gutter-x * -1;
		max-width:none;
		border-radius:0;

		&:not(:focus):not(.focus) {
			box-shadow:none;
		}
	}
	
}




// label

// input:not([type=checkbox]):not([type=radio]):not([type=reset]):not([type=submit]),
// textarea,
// select,

// input:not([type=checkbox]):not([type=radio]):not([type=reset]):not([type=submit]),
// select,


// select[multiple],
// textarea,



// input:not([type=checkbox]):not([type=radio]):not([type=reset]):not([type=submit]),
// select,



//select gets special treatment because it's such a bitch



//disabled
