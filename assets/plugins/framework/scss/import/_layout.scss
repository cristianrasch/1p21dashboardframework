/*** LAYOUTING CONTAINERS AND SHIT ***/


	/* CONTAINER */
		$prefix: '.container';
		#{$prefix} {
			& {
				width:100%;
				padding-left: $container-gutter;
				padding-right: $container-gutter;
				margin: 0 auto;
				max-width: $container-max-width;
			}

			&#{$prefix}-fluid {
				max-width: none;
			}

			@include br($mobile-br-max-opposite) {
				&#{$prefix}-wide {
					padding-left: $container-gutter-wide;
					padding-right: $container-gutter-wide;
				}
				&#{$prefix}-slim {
					padding-left: $container-gutter-slim;
					padding-right: $container-gutter-slim;
				}
			}

			@include br(#{$mobile-br-max}-max) {
				padding-left: $container-gutter-mobile;
				padding-right: $container-gutter-mobile;
				max-width: $container-max-width-mobile;
			}
		}




	/* flex grid classes*/
		
		// mixins and shit

			@mixin internal-set-grid-col-width($prepend-sel:'',$gap:0,$nest:true) {

				@for $i from 1 through $grid-units {

					@if $nest == true {

						#{$prepend-sel}-#{$i} {
							// width: ( 100% / $i );
							@if $gap {
								width: calc( #{ 100% * ($i/$grid-units ) } - #{$gap} );
							}@else {
								width: #{ 100% * ($i/$grid-units ) };
							}
						}

					}@else {

						@at-root #{$prepend-sel}-#{$i} {
							// width: ( 100% / $i );
							@if $gap {
								width: calc( #{ 100% * ($i/$grid-units ) } - #{$gap} );
							}@else {
								width: #{ 100% * ($i/$grid-units ) };
							}
						}

					}
				}
			}

		$prefix: '.flex';


		#{$prefix} {
			
			&-grid {
				margin-left: $grid-gap * -1;
				margin-bottom: $grid-gap;
				display:flex;
				flex-wrap:wrap;

				&-compact {
					margin-left: $grid-gap-compact * -1;
					margin-bottom: $grid-gap-compact;

					> [class*=flex-col-] {
						width: calc(100% - #{$grid-gap-compact});
					}

					> [class*=flex-col-],
					> #{$prefix}-child {
						margin-top: #{$grid-gap-compact};
						margin-left: #{$grid-gap-compact};
					}
				}

				// &-expanded {
				// 	margin-left: $grid-gap-expanded * -1;
				// 	margin-bottom: $grid-gap-expanded;


				// 	> [class*=flex-col-] {
				// 		width: calc(100% - #{$grid-gap-expanded});
				// 	}

				// 	> [class*=flex-col-],
				// 	> #{$prefix}-child {
				// 		margin-top: #{$grid-gap-expanded};
				// 		margin-left: #{$grid-gap-expanded};
				// 	}
				// }

				&-no-gutter {
					&,
					&-x {
						&,
						> [class*=flex-col-],
						> #{$prefix}-child {
							margin-left: 0;
						}
					}

					&,
					&-y {
						margin-bottom: 0;
						
						> [class*=flex-col-],
						> #{$prefix}-child {
							margin-top: 0;
						}


						> [class*=flex-col-],
						> #{$prefix}-child {
							margin-top: 0;
						}
					}
				}
			}



			@at-root [class*=flex-col-] {
				// flex-grow: 0;
				// flex-shrink: 0;
				width: calc(100% - #{$grid-gap});

				#{$prefix}-no-gutter & {
					width: 100%;
				}
			}

			@at-root [class*=flex-col-],
			#{$prefix}-child {
				margin-top: #{$grid-gap};
				margin-left: #{$grid-gap};
			}

			@include internal-set-grid-col-width(#{&}-col,$grid-gap,false);

			&-grid-compact {
				@include internal-set-grid-col-width(#{$prefix}-col,$grid-gap-compact);
			}

			// &-grid-expanded {
			// 	@include internal-set-grid-col-width(#{$prefix}-col,$grid-gap-expanded);
			// }
			
			&-grid-no-gutter,
			&-grid-no-gutter-x {
				@include internal-set-grid-col-width(#{$prefix}-col,null);
			}

			@each $tag in $calculated-br-tags {
				@include br($tag) {

					@include internal-set-grid-col-width(#{&}-col-#{$tag},$grid-gap,false);
					
					&-grid-compact {
						@include internal-set-grid-col-width(#{$prefix}-col-#{$tag},$grid-gap-compact);
					}
		
					// &-grid-expanded {
					// 	@include internal-set-grid-col-width(#{$prefix}-col-#{$tag},$grid-gap-expanded);
					// }
					
					&-grid-no-gutter,
					&-grid-no-gutter-x {
						@include internal-set-grid-col-width(#{$prefix}-col-#{$tag},null);
					}
				}
			}
		}